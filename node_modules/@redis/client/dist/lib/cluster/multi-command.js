"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("./commands");
const multi_command_1 = require("../multi-command");
const commander_1 = require("../commander");
const _1 = require(".");
class RedisClusterMultiCommand {
    #multi = new multi_command_1.default();
    #executor;
    #firstKey;
    static extend(extensions) {
        return (0, commander_1.attachExtensions)({
            BaseClass: RedisClusterMultiCommand,
            modulesExecutor: RedisClusterMultiCommand.prototype.commandsExecutor,
            modules: extensions?.modules,
            functionsExecutor: RedisClusterMultiCommand.prototype.functionsExecutor,
            functions: extensions?.functions,
            scriptsExecutor: RedisClusterMultiCommand.prototype.scriptsExecutor,
            scripts: extensions?.scripts
        });
    }
    constructor(executor, firstKey) {
        this.#executor = executor;
        this.#firstKey = firstKey;
    }
    commandsExecutor(command, args) {
        const transformedArguments = command.transformArguments(...args);
        this.#firstKey ??= _1.default.extractFirstKey(command, args, transformedArguments);
        return this.addCommand(undefined, transformedArguments, command.transformReply);
    }
    addCommand(firstKey, args, transformReply) {
        this.#firstKey ??= firstKey;
        this.#multi.addCommand(args, transformReply);
        return this;
    }
    functionsExecutor(fn, args, name) {
        const transformedArguments = this.#multi.addFunction(name, fn, args);
        this.#firstKey ??= _1.default.extractFirstKey(fn, args, transformedArguments);
        return this;
    }
    scriptsExecutor(script, args) {
        const transformedArguments = this.#multi.addScript(script, args);
        this.#firstKey ??= _1.default.extractFirstKey(script, args, transformedArguments);
        return this;
    }
    async exec(execAsPipeline = false) {
        if (execAsPipeline) {
            return this.execAsPipeline();
        }
        return this.#multi.handleExecReplies(await this.#executor(this.#multi.queue, this.#firstKey, multi_command_1.default.generateChainId()));
    }
    EXEC = this.exec;
    async execAsPipeline() {
        return this.#multi.transformReplies(await this.#executor(this.#multi.queue, this.#firstKey));
    }
}
exports.default = RedisClusterMultiCommand;
(0, commander_1.attachCommands)({
    BaseClass: RedisClusterMultiCommand,
    commands: commands_1.default,
    executor: RedisClusterMultiCommand.prototype.commandsExecutor
});
